{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Docker for Opsani Servo",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Can contain only ASCII characters."
    },  
    "InstanceType" : {
      "Description" : "Servo Docker EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [
        "t2.small", 
        "t2.medium", 
        "t2.large", 
        "m3.medium", 
        "m3.large", 
        "m3.xlarge", 
        "m3.2xlarge", 
        "m4.large", 
        "m4.xlarge", 
        "m4.2xlarge", 
        "m4.4xlarge", 
        "m4.10xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
    },
    "VpcId":{
        "Description":"Provide VPC resource ID ",
        "Type":"String"
    },
    "PrivateSubnetId":{
        "Description":"Provide Public Subnet ID ",
        "Type":"String"
    },
    "VpcName": {
        "Description": "Prefix VPC resource names for easy identification",
        "Type": "String"
    },
    "AmiId":{
        "Description":"Ami to launch ec2 instances",
        "Type":"String"
    }
  },
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"HVM64" : "ami-00b99db251c4b691a"},
      "us-west-2"        : {"HVM64" : "ami-0f1f7576097247b28"},
      "us-east-2"        : {"HVM64" : "ami-006fa13c7887dc68c"},
      "us-west-1"        : {"HVM64" : "ami-03d58f725e0a129b6"}
    }
  },

  "Resources" : {

    "ServoInstance": {
      "Type": "AWS::EC2::Instance",
     "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "ServoSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y\n",
             "yum install python3-devel -y\n",
             "yum install jq -y\n",
             "yum install git -y\n",
             "amazon-linux-extras install -y docker\n",
             "systemctl start docker\n",
             "systemctl enable docker\n",
             "usermod -a -G docker ec2-user\n",
             "git clone https://github.com/opsani/servo-ec2asg-wavefront-vegeta.git /home/ec2-user/servo\n",
             "chown -R ec2-user /home/ec2-user/servo\n",
             "chgrp -R ec2-user /home/ec2-user/servo\n",
             "curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\n",
             "chmod +x /usr/local/bin/docker-compose\n",
             "docker-compose version\n"
		]]}}

      }
    },
    "ServoSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    }
  },

  "Outputs" : {
    "ServoIP" : {
      "Description" : "Hostname for newly created Servo Docker",
      "Value" : { "Fn::Join" : ["", ["ssh ec2-user@", { "Fn::GetAtt" : [ "ServoInstance", "PublicDnsName" ]}]] }
    }
  }
}

